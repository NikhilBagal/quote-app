{"version":3,"sources":["components/quote.js","components/buttons.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","className","text","authorName","Buttons","txt","onClick","handleClick","href","data-size","target","rel","aria-hidden","Main","updateState","fetch","then","response","json","data","setState","quote","content","author","generateQuote","rollBg","newGradient","c1","r","Math","floor","g","random","b","c2","rgb","body","document","querySelector","head","auth","value","setTimeout","style","background","color","state","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mSAWeA,MATf,SAAeC,GACX,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,YAAYD,EAAME,MAChC,uBAAGD,UAAU,YAAb,WAAiCD,EAAMG,cCUpCC,MAdf,SAAiBJ,GACb,IAAMK,EAAG,UAAML,EAAME,KAAZ,qBAA6BF,EAAMG,YAC5C,OACI,yBAAKF,UAAU,WACX,4BAAQA,UAAU,UAAUK,QAASN,EAAMO,aAA3C,aACA,uBAAGN,UAAU,eACLO,KAAI,gDAA2CH,GAC/CI,YAAU,QAAQC,OAAO,SAASC,IAAI,uBAClC,uBAAGV,UAAU,gBAAgBW,cAAY,QAAzC,YCsETC,G,kBA1EX,aAAc,IAAD,8BACT,+CAWJC,YAAc,WACVC,MAAM,kCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEF,EAAKC,SAAS,CACVC,MAAOF,EAAKG,QACZC,OAAQJ,EAAKI,aAnBhB,EAyBbC,cAAgB,WACZ,EAAKV,cACL,EAAKW,UA3BI,EA8BbC,YAAc,WACV,IAAIC,EAAK,CACLC,EAAGC,KAAKC,MAAM,KACdC,EAAGF,KAAKC,MAAM,GAAiB,IAAdD,KAAKG,UACtBC,EAAGJ,KAAKC,MAAoB,GAAdD,KAAKG,WAEnBE,EAAK,CACLN,EAAGC,KAAKC,MAAM,KACdC,EAAGF,KAAKC,MAAM,GAAiB,IAAdD,KAAKG,UACtBC,EAAGJ,KAAKC,MAAoB,GAAdD,KAAKG,WAQvB,OANAL,EAAGQ,IAAM,OAAOR,EAAGC,EAAE,IAAID,EAAGI,EAAE,IAAIJ,EAAGM,EAAE,IACvCC,EAAGC,IAAM,OAAOD,EAAGN,EAAE,IAAIM,EAAGH,EAAE,IAAIG,EAAGD,EAAE,IAC3B,CACR,GAAON,EAAGQ,IACV,GAAOD,EAAGC,MA7CL,EAmDbV,OAAS,WACL,IAAIW,EAAOC,SAASC,cAAc,QAC9BC,EAAOF,SAASC,cAAc,iBAC9BE,EAAOH,SAASC,cAAc,gBAC5BG,EAAQ,EAAKf,cACnBgB,YAAW,WACPN,EAAKO,MAAMC,WAAX,oCAAqDH,EAAMd,GAA3D,aAAkEc,EAAMP,IACxEK,EAAKI,MAAME,MAAQJ,EAAMd,GACzBa,EAAKG,MAAME,MAAQJ,EAAMP,KAC3B,MA1DF,EAAKY,MAAQ,CACTzB,MAAO,GACPE,OAAS,IAJJ,E,iFASTwB,KAAKjC,gB,+BAwDL,OACI,yBAAKb,UAAU,WACX,kBAAC,EAAD,CAAOC,KAAM6C,KAAKD,MAAMzB,MAAOlB,WAAY4C,KAAKD,MAAMvB,SACtD,kBAAC,EAAD,CAAShB,YAAawC,KAAKvB,cAAetB,KAAM6C,KAAKD,MAAMzB,MAAOlB,WAAY4C,KAAKD,MAAMvB,c,GArEtFyB,IAAMC,YCOVC,MARf,WACE,OACE,yBAAKjD,UAAU,OACX,kBAAC,EAAD,QCKYkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASqB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09b8b7e7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Quote(props){\r\n    return(\r\n        <div className=\"quote-txt\">\r\n            <h1 className=\"head-txt\">{props.text}</h1>\r\n            <p className=\"auth-txt\">Author: {props.authorName}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Quote","import React from 'react';\r\n\r\nfunction Buttons(props){\r\n    const txt = `${props.text}  Author- ${props.authorName}`\r\n    return(\r\n        <div className=\"btn-sec\">\r\n            <button className=\"gen-btn\" onClick={props.handleClick}>New Quote</button>\r\n            <a className=\"twitter-link\"\r\n                    href={`https://twitter.com/intent/tweet?text=${txt}`}\r\n                    data-size=\"large\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <i className=\"fa fa-twitter\" aria-hidden=\"true\">Tweet</i>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons","import React from 'react'\r\nimport Quote from './quote'\r\nimport Buttons from './buttons'\r\nimport './Main.css';\r\n\r\nclass Main extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            quote: '',\r\n            author : ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.updateState()\r\n    }\r\n\r\n    updateState = () => {\r\n        fetch('https://api.quotable.io/random')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n             //   console.log(data)\r\n                this.setState({\r\n                    quote: data.content,\r\n                    author: data.author\r\n                })\r\n               // console.log(this.state.author)\r\n            }) \r\n    }\r\n\r\n    generateQuote = () => {\r\n        this.updateState()\r\n        this.rollBg()\r\n    }\r\n\r\n    newGradient = () => {\r\n        var c1 = {\r\n            r: Math.floor(255),\r\n            g: Math.floor(35+Math.random()*220),\r\n            b: Math.floor(Math.random()*55)\r\n        };\r\n        var c2 = {\r\n            r: Math.floor(255),\r\n            g: Math.floor(35+Math.random()*220),\r\n            b: Math.floor(Math.random()*85)\r\n          };\r\n        c1.rgb = 'rgb('+c1.r+','+c1.g+','+c1.b+')';\r\n        c2.rgb = 'rgb('+c2.r+','+c2.g+','+c2.b+')';\r\n        const obj = {\r\n            'c1' : c1.rgb,\r\n            'c2' : c2.rgb\r\n        }\r\n        return obj\r\n       // return 'linear-gradient(to right, '+c1.rgb+', '+c2.rgb+')';\r\n    }\r\n\r\n    rollBg = () => {\r\n        var body = document.querySelector('.app');\r\n        var head = document.querySelector('.quote-txt h1')\r\n        var auth = document.querySelector('.quote-txt p')\r\n        const value = this.newGradient();\r\n        setTimeout(()=> {\r\n            body.style.background = `linear-gradient(to right, ${value.c1}, ${value.c2}`;\r\n            head.style.color = value.c1;\r\n            auth.style.color = value.c2;\r\n        },500)\r\n        \r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <Quote text={this.state.quote} authorName={this.state.author}/>\r\n                <Buttons handleClick={this.generateQuote} text={this.state.quote} authorName={this.state.author}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport './App.css';\nimport Main from './components/main'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n        <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}